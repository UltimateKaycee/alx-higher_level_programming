================
Using class file
================


Class Instanciation
===================


::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

A single iterable object argument.

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


A ``TypeError`` occurs with more than one arguments.

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Procedure
=========

``MyList`` inherited ``list`` class with same methods.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]


::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

item can be removed with ``remove()`` method.

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]



``print_sorted`` Method
=======================

``MyList`` implements a single method - a public instance method
``print_sorted(self)``.

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

TypeError occurs if an argument is supplied.

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

The list in printed in sorted ascending order.

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

::

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Initial list is unaltered after a method call.

::

    >>> print(my_list)
    [1, 4, 2, 3, 5]

lists of strings is sorted.

::

    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['udokas', 'uncle', 'enyi', 'vision']

::

    >>> my_list.print_sorted()
    ['udokas', 'vision', 'uncle', 'enyi']


::

    >>> print(my_list)
    ['udokas', 'uncle', 'enyi', 'vision']

empty list is not sorted.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

TypeError for ``print_sorted(...)`` on a list of different types.

::

    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
